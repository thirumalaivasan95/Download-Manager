# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI Feature Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-matrix:
    name: Build and Test (${{ matrix.os }} ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      QT_VERSION: '5.15.10'
    steps:
      - uses: actions/checkout@v4

      - name: Install Qt5 (macOS)
        if: runner.os == 'macOS'
        run: brew install qt@5

      - name: Set Qt5 Environment Path (macOS)
        if: runner.os == 'macOS'
        run: echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)/lib/cmake" >> $GITHUB_ENV

      - name: Check Available Qt Versions
        if: runner.os != 'macOS'
        run: |
          pip install aqtinstall
          available_versions=$(python -m aqt list-qt windows desktop | grep -oE '^[0-9]+\.[0-9]+\.[0-9]+$')
          echo "Available Qt Versions: $available_versions"
          if echo "$available_versions" | grep -q "${{ env.QT_VERSION }}"; then
            echo "Qt version ${{ env.QT_VERSION }} is available."
          else
            echo "Qt version ${{ env.QT_VERSION }} is not available. Falling back to latest version."
            latest_version=$(echo "$available_versions" | tail -n 1)
            echo "QT_VERSION=$latest_version" >> $GITHUB_ENV
          fi

      - name: Install Qt5
        if: runner.os != 'macOS'
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ env.QT_VERSION }}
          modules: 'qtbase'

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev libssl-dev libjsoncpp-dev

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: brew install curl openssl jsoncpp

      - name: Debug CMake Configuration
        run: |
          echo "CMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }}"
          echo "Qt5_DIR=${{ env.Qt5_DIR }}"

      - name: Configure CMake
        run: >
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH || env.Qt5_DIR }}"

      - name: Build
        run: cmake --build build --config ${{ env.BUILD_TYPE }}

      - name: Debug Build Directory
        run: ls -l build

      - name: Run tests with verbose output
        run: ctest --test-dir build --output-on-failure --verbose -C ${{ env.BUILD_TYPE }}
        continue-on-error: true

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/Testing/Temporary/LastTest.log

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/

  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format
      - name: Run clang-format
        run: |
          find . -regex '.*\.[ch]pp' -exec clang-format --dry-run --Werror {} +

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck
      - name: Run cppcheck
        run: cppcheck --enable=all --inconclusive --error-exitcode=1 --std=c++17 --suppress=missingIncludeSystem .
