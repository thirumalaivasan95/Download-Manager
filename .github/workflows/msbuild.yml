# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: CI Feature Matrix

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-matrix:
    name: Build and Test (${{ matrix.os }} ${{ matrix.build_type }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
    env:
      BUILD_TYPE: ${{ matrix.build_type }}
      QT_VERSION: '6.9.1'
    steps:
      - uses: actions/checkout@v4

      - name: Install Qt5 (macOS)
        if: runner.os == 'macOS'
        run: brew install qt@5

      - name: Set Qt5 Environment Path (macOS)
        if: runner.os == 'macOS'
        run: echo "CMAKE_PREFIX_PATH=$(brew --prefix qt@5)/lib/cmake" >> $GITHUB_ENV

      - name: Install aqtinstall
        run: pip install --upgrade aqtinstall

      - name: Verify aqtinstall installation
        run: python -m aqt help

      - name: Debug aqtinstall setup
        shell: bash
        run: |
          python -m aqt list-qt windows desktop || echo "Failed to list Qt versions"
          if [ -n "$QT_VERSION" ]; then
            python -m aqt list-qt windows desktop --arch win64_msvc2019_64 --modules $QT_VERSION || echo "Failed to list modules"
          fi

      - name: Check Available Qt Versions
        shell: bash
        run: |
          available_versions=$(python -m aqt list-qt windows desktop || echo "")
          if [ -z "$available_versions" ]; then
            echo "Error: Could not retrieve available Qt versions. Please check the aqtinstall setup."
            echo "QT_VERSION=6.9.1" >> $GITHUB_ENV
          else
            echo "Available versions output: $available_versions"
          fi

      - name: Determine Compatible Qt Version, Architecture, and Modules
        shell: bash
        run: |
          # List available Qt 5.x versions
          available_versions=$(python -m aqt list-qt windows desktop || echo "")
          if [ -z "$available_versions" ]; then
            echo "Error: Could not retrieve available Qt versions."
            exit 1
          fi

          # Find the latest stable 5.15.x version
          compatible_version=$(echo "$available_versions" | tr ' ' '\n' | grep -E '^5\.15\.' | sort -V | grep -v 'beta\|alpha' | tail -n 1)
          if [ -z "$compatible_version" ]; then
            echo "Error: No compatible Qt 5.15.x version found."
            exit 1
          fi

          # List available architectures for this version (one per line)
          available_archs=$(python -m aqt list-qt windows desktop --arch "$compatible_version" | grep win64 | tr ' ' '\n' | grep -v '^$' || true)
          if [ -z "$available_archs" ]; then
            echo "Error: No architectures found for Qt version $compatible_version."
            exit 1
          fi

          # Try each available architecture until qtbase is found
          found_arch=""
          for arch in $available_archs; do
            modules=$(python -m aqt list-qt windows desktop --modules "$compatible_version" "$arch" | grep qtbase || true)
            if [ -n "$modules" ]; then
              found_arch="$arch"
              break
            fi
          done

          if [ -z "$found_arch" ]; then
            echo "Error: 'qtbase' module not available for Qt version $compatible_version and any win64 arch."
            for arch in $available_archs; do
              python -m aqt list-qt windows desktop --modules "$compatible_version" "$arch"
            done
            exit 1
          fi

          # Export the compatible version and arch
          echo "QT_VERSION=${compatible_version}" >> $GITHUB_ENV
          echo "QT_ARCH=${found_arch}" >> $GITHUB_ENV
          echo "Selected Qt version: $compatible_version"
          echo "Selected Qt arch: $found_arch"

      - name: Install Qt
        shell: bash
        run: |
          python -m aqt install-qt windows desktop $QT_VERSION $QT_ARCH --outputdir ${{ github.workspace }}/Qt --modules qtbase

      - name: Install Ninja
        uses: seanmiddleditch/gha-setup-ninja@v3

      - name: Install dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update && sudo apt-get install -y libcurl4-openssl-dev libssl-dev libjsoncpp-dev
          if [ $? -ne 0 ]; then
            echo "Failed to install dependencies. Check package availability."
            exit 1
          fi

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install curl openssl jsoncpp || { echo "Failed to install dependencies via brew."; exit 1; }

      - name: Debug CMake Configuration
        run: |
          echo "CMAKE_PREFIX_PATH=${{ env.CMAKE_PREFIX_PATH }}"
          echo "Qt5_DIR=${{ env.Qt5_DIR }}"
          echo "Checking for Qt5Config.cmake in ${{ env.CMAKE_PREFIX_PATH }}..."
          find "${{ env.CMAKE_PREFIX_PATH }}" -name Qt5Config.cmake || echo "Qt5Config.cmake not found."

      - name: Validate CMake Paths
        run: |
          echo "CMAKE_PREFIX_PATH=${CMAKE_PREFIX_PATH}"
          echo "Qt5_DIR=${Qt5_DIR}"
          if [ -z "${CMAKE_PREFIX_PATH}" ] || [ ! -d "${CMAKE_PREFIX_PATH}" ]; then
            echo "Error: CMAKE_PREFIX_PATH is invalid or not set correctly."
            if [ "${{ runner.os }}" = "macOS" ]; then
              echo "Contents of $(brew --prefix qt@5):"
              ls -l $(brew --prefix qt@5) || echo "Directory not found"
              echo "Contents of ${CMAKE_PREFIX_PATH}:"
              ls -l ${CMAKE_PREFIX_PATH} || echo "Directory not found"
            else
              echo "Contents of ${CMAKE_PREFIX_PATH}:"
              ls -l ${CMAKE_PREFIX_PATH} || echo "Directory not found"
            fi
            exit 1
          fi
          # Check for Qt5Config.cmake
          if ! find "${CMAKE_PREFIX_PATH}" -name Qt5Config.cmake | grep -q Qt5Config.cmake; then
            echo "Error: Qt5Config.cmake not found in CMAKE_PREFIX_PATH."
            find "${CMAKE_PREFIX_PATH}" -name Qt5*cmake || true
            exit 1
          fi

      - name: Configure CMake
        run: |
          cmake -S . -B build -G Ninja \
            -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
            -DCMAKE_PREFIX_PATH="${{ env.CMAKE_PREFIX_PATH || env.Qt5_DIR }}"
          cmake_exit_code=$?
          if [ $cmake_exit_code -ne 0 ]; then
            echo "CMake configuration failed. Printing CMakeError.log:"
            cat build/CMakeFiles/CMakeError.log || echo "No CMakeError.log found."
            exit $cmake_exit_code
          fi

      - name: Build
        run: |
          cmake --build build --config ${{ env.BUILD_TYPE }} --verbose
          build_exit_code=$?
          if [ $build_exit_code -ne 0 ]; then
            echo "Build failed. Printing CMakeError.log:"
            cat build/CMakeFiles/CMakeError.log || echo "No CMakeError.log found."
            exit $build_exit_code
          fi

      - name: Debug Build Directory
        run: ls -l build

      - name: Run tests with verbose output
        run: ctest --test-dir build --output-on-failure --verbose -C ${{ env.BUILD_TYPE }}
        continue-on-error: true

      - name: Upload test logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-logs-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/Testing/Temporary/LastTest.log

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-${{ matrix.build_type }}
          path: build/

  format-check:
    name: Check Code Formatting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install clang-format
        run: sudo apt-get update && sudo apt-get install -y clang-format
      - name: Run clang-format
        run: |
          find . -regex '.*\.[ch]pp' -exec clang-format --dry-run --Werror {} +

  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install cppcheck
        run: sudo apt-get update && sudo apt-get install -y cppcheck
      - name: Run cppcheck
        run: cppcheck --enable=all --inconclusive --error-exitcode=1 --std=c++17 --suppress=missingIncludeSystem .
